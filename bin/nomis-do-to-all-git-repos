#!/usr/bin/env bash -e

# Do things to all git directories below current directory.
# Skips directories that contain a file called .ignore

# Copied from
# http://stackoverflow.com/questions/11981716/how-to-quickly-find-all-git-repos-under-a-directory
# with modifications.


#### Options and usage

script=$(basename ${BASH_SOURCE[0]})

# Switches
no_print_repo_heading__when_no_output_p=

usage() {
    echo "Usage:"
    echo ""
    echo "$(basename ${BASH_SOURCE[0]}) [options]"
    echo ""
    echo "options:"
    echo "-h             Print this help"
    echo "-n             Don't print repo heading when there's no output for it"
}

while getopts "hn" option; do
    case "${option}" in
        h)
            usage
            exit 0
            ;;
        n)
            no_print_repo_heading__when_no_output_p="YES"
            ;;
        *)
            usage 1>&2
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))



################################################################################
#### Colours

RED=`tput setaf 1`
GREEN=`tput setaf 2`
RESET=`tput sgr0`

HIGHLIGHT=${GREEN}
NORMAL=${RESET}

################################################################################

ARGS="$@"

function do_things {
    local d="$1"
    if [ -d "$d" ]; then
        if [ -e "$d/.ignore" ]; then
            echo -e "${HIGHLIGHT}________________________________________________________________________________"
            echo -e "${HIGHLIGHT}Ignoring $d${NORMAL}"
        else
            cd $d > /dev/null
            if [ -d ".git" ]; then
                output=$($ARGS)
                if [[ "${output}" \
                          || ! "${no_print_repo_heading__when_no_output_p}" ]]
                then
                    echo -e "${HIGHLIGHT}________________________________________________________________________________"
                    echo -e "${HIGHLIGHT}$PWD$NORMAL"
                fi
                if [[ "${output}" ]]
                then
                    echo -e "${output}"
                fi
                true
            else
                scan *
            fi
            cd .. > /dev/null
        fi
    fi
    #echo "Exiting do_things: pwd=`pwd`"
}

function scan {
    #echo "`pwd`"
    for x in "$@"; do
        do_things "$x"
    done
}

echo -e "${HIGHLIGHT}Scanning ${PWD}${NORMAL}"
scan .
